01-01-2021
-- basic file structure
-- models, inheritance only
-- migration files, first pass, no migration yet

01-04-2021
-- coded views/characters
-- copied to GitHub

01-05-2021
-- Added concerns/sluggy and included in character and novel models and views
-- Hopefully updated all relevant files to require concerns/sluggy
-- coded /novels/index, /new, /show views
-- coded character and novel edit forms
-- migrated databases, no major problems
-- created and migrated seed data 
-- did some minor bug hunting (bug hunt 1)
-- BUG SMASH (bug hunt 2): fixed the controller reading issue (note: don't forget to 'use' all your controllers in config.ru)

01-08-2021
-- added user model, users and sessions controllers, user views
-- deleted sluggy, alas poor sluggy. next time maybe think about broader methods to inherit before coding the databases
-- minor styling
-- created main index landing page
-- added helpers to appcont: 

01-11-2021
-- BUG SMASH: some formatting errors, some failure to inherit method errors
-- migrated user class db 
-- associated novels to users (db column add to novels, belongs_to in novel model, has_many in user model)
-- added bcrypt, better late than never
-- had to stop there when shotgun coughed and died 

01-12-2021
-- styled index page
-- BUG SMASH syntax errors, so many syntax errors
-- styled user show page, user new page, novels index page w/ and w/o login, novel show page
-- login & logout works
-- styled novel edit and create pages
-- added edit link to novel page and delete button to novel edit page
-- added patch code for novels
-- rerouted characters so charaacters go through novels
-- routed and styled character show pages to show the character name, novel, and associated tropes w/descriptions

01-15-2021
-- added modify/delete links at the bottom of the character page
-- patch code entered for characters
-- BUG SMASH. Lots of syntax errors.

01-18-2021
-- cleaned up some authorizations/located authorizations needed
-- double checked and added an if-authorized function for viewing the delete button on edit characters/novels views
-- added logged in method to novel controller
-- added flash error messages
-- added flash create/update messages for novels and characters

01-26-2021
-- filled out readme and license hahaha oops next time we do this first

TO DO:

TO EXPAND:
-- make genre a separate model, albeit a simple one: a novel has_many genres. Then add a show page to search novels by genre.
-- maybe add a public novel index page so people can view other people's novels without editing them?
-- in which case you'll need a button and a boolean column so users can toggle it public/not-public
-- maybe add an active/inactive boolean column to the novel thing
-- make and run tests for no real reason, just so you know you can
-- do something with the tropes page?

BUGS: 
-- creating a novel does not include the synopsis posting to the new novel page (is this a validation thing?)

NOTES: 
-- slugging and unslugging: artists and modules lab, Intro to Modules reading
-- login >> user index of novel projects >> novel: genre, word count, characters, edit option (list of tropes?) >> character >> edit option, list of tropes
-- authentication vs authorization 
-- update method will save, and thus will also trigger validation (making sure all fields have data)
-- validates method in the model also has an 'on: :create' so you can only validate at a certain point; this doesn't apply here.
-- erbs do not render http requests, just pull files
-- colors: 870d10, b05e60, d79392, 6e1418, f2babb, fce7e1, 973c3c, fad2ce
-- post route for new novels @novel = current_user.novels.build(params go here) followed by if @novel.save
-- in the edit view: IF current_user.id == @novel.user_id THEN render the erb ELSE flash message no touchy and redirect to index
(can probably also add this to create pages)
-- @novel = current_user.novels.find(params[:novel]), @character = @novel.characters.find(params[:id])

PROJECT GOALS
-- Build an M(odel)V(iews)C(ontroller) Sinatra application. DONE
-- Use ActiveRecord with Sinatra. DONE
-- Use multiple models. DONE
-- Use at least one has_many relationship on a User model and one belongs_to relationship on another model. DONE
-- Must have user accounts - users must be able to sign up, sign in, and sign out. DONE
-- Validate uniqueness of user login attribute (username or email). DONE
-- Once logged in, a user must have the ability to create, read, update and destroy the resource that belongs_to user. DONE
-- Ensure that users can edit and delete only their own resources - not resources created by other users. DONE 
-- Validate user input so bad data cannot be persisted to the database. DONE
-- BONUS: Display validation failures to user with error messages. (This is an optional feature, challenge yourself and give it a shot!) DONE

