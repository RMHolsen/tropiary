01-01-2021
-- basic file structure
-- models, inheritance only
-- migration files, first pass, no migration yet

01-04-2021
-- coded views/characters
-- copied to GitHub

01-05-2021
-- Added concerns/sluggy and included in character and novel models and views
-- Hopefully updated all relevant files to require concerns/sluggy
-- coded /novels/index, /new, /show views
-- coded character and novel edit forms
-- migrated databases, no major problems
-- created and migrated seed data 
-- did some minor bug hunting (bug hunt 1)
-- BUG SMASH (bug hunt 2): fixed the controller reading issue (note: don't forget to 'use' all your controllers in config.ru)

01-08-2021
-- added user model, users and sessions controllers, user views
-- deleted sluggy, alas poor sluggy. next time maybe think about broader methods to inherit before coding the databases
-- minor styling
-- created main index landing page
-- added helpers to appcont: 

TO DO:
-- associate novels to users (db column add, belongs_to association in novel model, has_many association in user model)
-- make sure novels are only accessible to logged in users
-- make sure characters are only accessible to logged in users, via novels??
-- recode views to match new tiered wireframe
-- patch code for characters and novels
-- make flash messages
-- make tests
-- run tests
-- bug hunt

TO EXPAND:
-- make genre a separate model, albeit a simple one: a novel has_many genres. Then add a show page to search novels by genre.

BUGS: 

NOTES: 
-- slugging and unslugging: artists and modules lab, Intro to Modules reading
-- login >> user index of novel projects >> novel: genre, word count, characters, edit option (list of tropes?) >> character >> edit option, list of tropes

PROJECT GOALS
-- Build an M(odel)V(iews)C(ontroller) Sinatra application. DONE
-- Use ActiveRecord with Sinatra. DONE
-- Use multiple models. DONE
-- Use at least one has_many relationship on a User model and one belongs_to relationship on another model. DONE
-- Must have user accounts - users must be able to sign up, sign in, and sign out. DONEish
-- Validate uniqueness of user login attribute (username or email). DONE
-- Once logged in, a user must have the ability to create, read, update and destroy the resource that belongs_to user.
-- Ensure that users can edit and delete only their own resources - not resources created by other users.
-- Validate user input so bad data cannot be persisted to the database.
-- BONUS: Display validation failures to user with error messages. (This is an optional feature, challenge yourself and give it a shot!)

